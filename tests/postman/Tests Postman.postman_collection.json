{
	"info": {
		"_postman_id": "08904b44-3c40-49cf-a944-0f91e2995a40",
		"name": "Tests Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35087800",
		"_collection_link": "https://compunet2-7762.postman.co/workspace/5b4f6edd-a5ae-4044-8b4b-4c203403e7bb/collection/35087800-08904b44-3c40-49cf-a944-0f91e2995a40?action=share&source=collection_link&creator=35087800"
	},
	"item": [
		{
			"name": "üîê Authentication & Authorization",
			"item": [
				{
					"name": "Register New Player",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response contains user data and token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('role', 'player');",
									"    pm.expect(jsonData.data.user).to.have.property('balance', 10000);",
									"});",
									"",
									"// Store player token for later use",
									"const jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data.token) {",
									"    pm.environment.set('player_token', jsonData.data.token);",
									"    pm.environment.set('player_id', jsonData.data.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testplayer{{$randomInt}}\",\n    \"password\": \"testpass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data.user.role).to.eql('admin');",
									"});",
									"",
									"// Update admin token",
									"const jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data.token) {",
									"    pm.environment.set('auth_token', jsonData.data.token);",
									"    pm.environment.set('admin_id', jsonData.data.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Unauthorized Access (No Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Unauthorized message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Unauthorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë§ User Management",
			"item": [
				{
					"name": "Get Admin Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile data is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('username', 'admin');",
									"    pm.expect(jsonData.data).to.have.property('role', 'admin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains users array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('username');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{player_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{player_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Balance updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('balance', 15000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"balance\": 15000\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{player_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{player_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Balance check result\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('hasEnoughBalance');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{player_id}}/balance/check?amount=5000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{player_id}}",
								"balance",
								"check"
							],
							"query": [
								{
									"key": "amount",
									"value": "5000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Info (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"updatedplayer{{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{player_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{player_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Player Access to Admin Route (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Forbidden message for player\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{player_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.message).to.include('deleted successfully');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{player_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{player_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üèüÔ∏è Event Management",
			"item": [
				{
					"name": "Create New Event (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Event created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('status', 'open');",
									"    pm.expect(jsonData.data).to.have.property('odds');",
									"});",
									"",
									"// Store event ID for later tests",
									"const jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data._id) {",
									"    pm.environment.set('event_id', jsonData.data._id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Real Madrid vs Barcelona {{$randomInt}}\",\n    \"odds\": {\n        \"home_win\": 2.5,\n        \"draw\": 3.2,\n        \"away_win\": 2.8\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Open Events (All Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Open events retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event data retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('odds');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/events/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Event Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event status retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('isOpen');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/events/{{event_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"{{event_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Events (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All events retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/events/admin/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"admin",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Event (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Event Name {{$randomInt}}\",\n    \"odds\": {\n        \"home_win\": 2.0,\n        \"draw\": 3.5,\n        \"away_win\": 3.0\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/events/admin/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"admin",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Player Cannot Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Forbidden message for player\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{player_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Unauthorized Event\",\n    \"odds\": {\n        \"home_win\": 2.0,\n        \"draw\": 3.0,\n        \"away_win\": 2.5\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üé∞ Betting System",
			"item": [
				{
					"name": "Create Bet (Player Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Bet created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('event_id');",
									"    pm.expect(jsonData.data).to.have.property('status', 'pending');",
									"});",
									"",
									"// Store bet ID for later tests",
									"const jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.data._id) {",
									"    pm.environment.set('bet_id', jsonData.data._id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{player_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_id\": \"{{event_id}}\",\n    \"chosen_option\": \"home_win\",\n    \"amount\": 1000\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/bets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Bets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Player bets retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{player_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/bets/my-bets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets",
								"my-bets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Player Bet Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Player stats retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('totalBets');",
									"    pm.expect(jsonData.data).to.have.property('totalAmount');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{player_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/bets/my-stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets",
								"my-stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Invalid Bet Amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid amount error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.message).to.include('positive number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{player_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_id\": \"{{event_id}}\",\n    \"chosen_option\": \"home_win\",\n    \"amount\": -100\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/bets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Invalid Bet Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid option error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.message).to.include('Invalid chosen option');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{player_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_id\": \"{{event_id}}\",\n    \"chosen_option\": \"invalid_option\",\n    \"amount\": 100\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/bets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Admin Cannot Place Bet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Forbidden message for admin\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_id\": \"{{event_id}}\",\n    \"chosen_option\": \"home_win\",\n    \"amount\": 100\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/bets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîß Admin Bet Management",
			"item": [
				{
					"name": "Get All Bets (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All bets retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/bets/admin/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets",
								"admin",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event Bets (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event bets retrieved\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/bets/event/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets",
								"event",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Bet Status (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Bet status updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"won\",\n    \"winnings\": 2500\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/bets/admin/{{bet_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets",
								"admin",
								"{{bet_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close Event and Process Bets (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event closed successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.message).to.include('closed successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"final_result\": \"home_win\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/events/{{event_id}}/close",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"{{event_id}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process Bets for Closed Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Bets processed successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('processed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/bets/event/{{event_id}}/process",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets",
								"event",
								"{{event_id}}",
								"process"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bet (Admin Only) - Cleanup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Bet deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.message).to.include('deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/bets/admin/{{bet_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bets",
								"admin",
								"{{bet_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üßπ Cleanup & Final Tests",
			"item": [
				{
					"name": "Delete Test Event (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.message).to.include('deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/events/admin/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"admin",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Admin Still Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Admin profile intact\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('username', 'admin');",
									"    pm.expect(jsonData.data).to.have.property('role', 'admin');",
									"});",
									"",
									"console.log('‚úÖ All integration tests completed successfully!');",
									"console.log('üîê Authentication and authorization working correctly');",
									"console.log('üë§ User management tested');",
									"console.log('üèüÔ∏è Event management tested');",
									"console.log('üé∞ Betting system tested');",
									"console.log('üõ°Ô∏è Role-based access control validated');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ Running test: ' + pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has valid JSON', function () {",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "localhost:3000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2OGRjMzY5ZTY1NDc3N2Q5ZTVhY2UzZjAiLCJ1c2VybmFtZSI6ImFkbWluIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzU5MjYyNTAyLCJleHAiOjE3NjY0NjI1MDJ9.nYGPCJdE-I8SJ1V7aCPUsXmTeB2bz2ZeAe6_DXOvyco",
			"type": "string"
		},
		{
			"key": "player_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "player_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "event_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "bet_id",
			"value": "",
			"type": "string"
		}
	]
}